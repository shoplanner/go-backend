// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package list

import (
	"fmt"
	"strings"
)

const (
	// ListStatusPlanning is a Status of type Planning.
	ListStatusPlanning Status = iota
	// ListStatusProcessing is a Status of type Processing.
	ListStatusProcessing
	// ListStatusArchived is a Status of type Archived.
	ListStatusArchived
)

var ErrInvalidListStatus = fmt.Errorf("not a valid Status, try [%s]", strings.Join(_ListStatusNames, ", "))

const _ListStatusName = "planningprocessingarchived"

var _ListStatusNames = []string{
	_ListStatusName[0:8],
	_ListStatusName[8:18],
	_ListStatusName[18:26],
}

// ListStatusNames returns a list of possible string values of Status.
func ListStatusNames() []string {
	tmp := make([]string, len(_ListStatusNames))
	copy(tmp, _ListStatusNames)
	return tmp
}

// ListStatusValues returns a list of the values for Status
func ListStatusValues() []Status {
	return []Status{
		ListStatusPlanning,
		ListStatusProcessing,
		ListStatusArchived,
	}
}

var _ListStatusMap = map[Status]string{
	ListStatusPlanning:   _ListStatusName[0:8],
	ListStatusProcessing: _ListStatusName[8:18],
	ListStatusArchived:   _ListStatusName[18:26],
}

// String implements the Stringer interface.
func (x Status) String() string {
	if str, ok := _ListStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Status(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Status) IsValid() bool {
	_, ok := _ListStatusMap[x]
	return ok
}

var _ListStatusValue = map[string]Status{
	_ListStatusName[0:8]:   ListStatusPlanning,
	_ListStatusName[8:18]:  ListStatusProcessing,
	_ListStatusName[18:26]: ListStatusArchived,
}

// ParseListStatus attempts to convert a string to a Status.
func ParseListStatus(name string) (Status, error) {
	if x, ok := _ListStatusValue[name]; ok {
		return x, nil
	}
	return Status(0), fmt.Errorf("%s is %w", name, ErrInvalidListStatus)
}

// MarshalText implements the text marshaller method.
func (x Status) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Status) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseListStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// StateStatusWaiting is a StateStatus of type Waiting.
	StateStatusWaiting StateStatus = iota
	// StateStatusMissing is a StateStatus of type Missing.
	StateStatusMissing
	// StateStatusTaken is a StateStatus of type Taken.
	StateStatusTaken
	// StateStatusReplaced is a StateStatus of type Replaced.
	StateStatusReplaced
)

var ErrInvalidStateStatus = fmt.Errorf("not a valid StateStatus, try [%s]", strings.Join(_StateStatusNames, ", "))

const _StateStatusName = "waitingmissingtakenreplaced"

var _StateStatusNames = []string{
	_StateStatusName[0:7],
	_StateStatusName[7:14],
	_StateStatusName[14:19],
	_StateStatusName[19:27],
}

// StateStatusNames returns a list of possible string values of StateStatus.
func StateStatusNames() []string {
	tmp := make([]string, len(_StateStatusNames))
	copy(tmp, _StateStatusNames)
	return tmp
}

// StateStatusValues returns a list of the values for StateStatus
func StateStatusValues() []StateStatus {
	return []StateStatus{
		StateStatusWaiting,
		StateStatusMissing,
		StateStatusTaken,
		StateStatusReplaced,
	}
}

var _StateStatusMap = map[StateStatus]string{
	StateStatusWaiting:  _StateStatusName[0:7],
	StateStatusMissing:  _StateStatusName[7:14],
	StateStatusTaken:    _StateStatusName[14:19],
	StateStatusReplaced: _StateStatusName[19:27],
}

// String implements the Stringer interface.
func (x StateStatus) String() string {
	if str, ok := _StateStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("StateStatus(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x StateStatus) IsValid() bool {
	_, ok := _StateStatusMap[x]
	return ok
}

var _StateStatusValue = map[string]StateStatus{
	_StateStatusName[0:7]:   StateStatusWaiting,
	_StateStatusName[7:14]:  StateStatusMissing,
	_StateStatusName[14:19]: StateStatusTaken,
	_StateStatusName[19:27]: StateStatusReplaced,
}

// ParseStateStatus attempts to convert a string to a StateStatus.
func ParseStateStatus(name string) (StateStatus, error) {
	if x, ok := _StateStatusValue[name]; ok {
		return x, nil
	}
	return StateStatus(0), fmt.Errorf("%s is %w", name, ErrInvalidStateStatus)
}

// MarshalText implements the text marshaller method.
func (x StateStatus) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *StateStatus) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseStateStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
