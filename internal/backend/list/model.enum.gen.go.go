// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package list

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strings"
)

const (
	// EventTypeFull is a EventType of type Full.
	EventTypeFull EventType = iota + 1
	// EventTypeProductsAdded is a EventType of type ProductsAdded.
	EventTypeProductsAdded
	// EventTypeProductsRemoved is a EventType of type ProductsRemoved.
	EventTypeProductsRemoved
	// EventTypeMembersAdded is a EventType of type MembersAdded.
	EventTypeMembersAdded
	// EventTypeMembersRemoved is a EventType of type MembersRemoved.
	EventTypeMembersRemoved
	// EventTypeOptsUpdated is a EventType of type OptsUpdated.
	EventTypeOptsUpdated
	// EventTypeDeleted is a EventType of type Deleted.
	EventTypeDeleted
	// EventTypeStatesReordered is a EventType of type StatesReordered.
	EventTypeStatesReordered
	// EventTypeStateUpdated is a EventType of type StateUpdated.
	EventTypeStateUpdated
)

var ErrInvalidEventType = fmt.Errorf("not a valid EventType, try [%s]", strings.Join(_EventTypeNames, ", "))

const _EventTypeName = "fullproductsAddedproductsRemovedmembersAddedmembersRemovedoptsUpdateddeletedstatesReorderedstateUpdated"

var _EventTypeNames = []string{
	_EventTypeName[0:4],
	_EventTypeName[4:17],
	_EventTypeName[17:32],
	_EventTypeName[32:44],
	_EventTypeName[44:58],
	_EventTypeName[58:69],
	_EventTypeName[69:76],
	_EventTypeName[76:91],
	_EventTypeName[91:103],
}

// EventTypeNames returns a list of possible string values of EventType.
func EventTypeNames() []string {
	tmp := make([]string, len(_EventTypeNames))
	copy(tmp, _EventTypeNames)
	return tmp
}

// EventTypeValues returns a list of the values for EventType
func EventTypeValues() []EventType {
	return []EventType{
		EventTypeFull,
		EventTypeProductsAdded,
		EventTypeProductsRemoved,
		EventTypeMembersAdded,
		EventTypeMembersRemoved,
		EventTypeOptsUpdated,
		EventTypeDeleted,
		EventTypeStatesReordered,
		EventTypeStateUpdated,
	}
}

var _EventTypeMap = map[EventType]string{
	EventTypeFull:            _EventTypeName[0:4],
	EventTypeProductsAdded:   _EventTypeName[4:17],
	EventTypeProductsRemoved: _EventTypeName[17:32],
	EventTypeMembersAdded:    _EventTypeName[32:44],
	EventTypeMembersRemoved:  _EventTypeName[44:58],
	EventTypeOptsUpdated:     _EventTypeName[58:69],
	EventTypeDeleted:         _EventTypeName[69:76],
	EventTypeStatesReordered: _EventTypeName[76:91],
	EventTypeStateUpdated:    _EventTypeName[91:103],
}

// String implements the Stringer interface.
func (x EventType) String() string {
	if str, ok := _EventTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("EventType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x EventType) IsValid() bool {
	_, ok := _EventTypeMap[x]
	return ok
}

var _EventTypeValue = map[string]EventType{
	_EventTypeName[0:4]:    EventTypeFull,
	_EventTypeName[4:17]:   EventTypeProductsAdded,
	_EventTypeName[17:32]:  EventTypeProductsRemoved,
	_EventTypeName[32:44]:  EventTypeMembersAdded,
	_EventTypeName[44:58]:  EventTypeMembersRemoved,
	_EventTypeName[58:69]:  EventTypeOptsUpdated,
	_EventTypeName[69:76]:  EventTypeDeleted,
	_EventTypeName[76:91]:  EventTypeStatesReordered,
	_EventTypeName[91:103]: EventTypeStateUpdated,
}

// ParseEventType attempts to convert a string to a EventType.
func ParseEventType(name string) (EventType, error) {
	if x, ok := _EventTypeValue[name]; ok {
		return x, nil
	}
	return EventType(0), fmt.Errorf("%s is %w", name, ErrInvalidEventType)
}

// MarshalText implements the text marshaller method.
func (x EventType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *EventType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseEventType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errEventTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *EventType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = EventType(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = EventType(v)
	case string:
		*x, err = ParseEventType(v)
	case []byte:
		*x, err = ParseEventType(string(v))
	case EventType:
		*x = v
	case int:
		*x = EventType(v)
	case *EventType:
		if v == nil {
			return errEventTypeNilPtr
		}
		*x = *v
	case uint:
		*x = EventType(v)
	case uint64:
		*x = EventType(v)
	case *int:
		if v == nil {
			return errEventTypeNilPtr
		}
		*x = EventType(*v)
	case *int64:
		if v == nil {
			return errEventTypeNilPtr
		}
		*x = EventType(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = EventType(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errEventTypeNilPtr
		}
		*x = EventType(*v)
	case *uint:
		if v == nil {
			return errEventTypeNilPtr
		}
		*x = EventType(*v)
	case *uint64:
		if v == nil {
			return errEventTypeNilPtr
		}
		*x = EventType(*v)
	case *string:
		if v == nil {
			return errEventTypeNilPtr
		}
		*x, err = ParseEventType(*v)
	}

	return
}

// Value implements the driver Valuer interface.
func (x EventType) Value() (driver.Value, error) {
	return x.String(), nil
}

const (
	// ExecStatusPlanning is a ExecStatus of type Planning.
	ExecStatusPlanning ExecStatus = iota + 1
	// ExecStatusProcessing is a ExecStatus of type Processing.
	ExecStatusProcessing
	// ExecStatusArchived is a ExecStatus of type Archived.
	ExecStatusArchived
)

var ErrInvalidExecStatus = fmt.Errorf("not a valid ExecStatus, try [%s]", strings.Join(_ExecStatusNames, ", "))

const _ExecStatusName = "planningprocessingarchived"

var _ExecStatusNames = []string{
	_ExecStatusName[0:8],
	_ExecStatusName[8:18],
	_ExecStatusName[18:26],
}

// ExecStatusNames returns a list of possible string values of ExecStatus.
func ExecStatusNames() []string {
	tmp := make([]string, len(_ExecStatusNames))
	copy(tmp, _ExecStatusNames)
	return tmp
}

// ExecStatusValues returns a list of the values for ExecStatus
func ExecStatusValues() []ExecStatus {
	return []ExecStatus{
		ExecStatusPlanning,
		ExecStatusProcessing,
		ExecStatusArchived,
	}
}

var _ExecStatusMap = map[ExecStatus]string{
	ExecStatusPlanning:   _ExecStatusName[0:8],
	ExecStatusProcessing: _ExecStatusName[8:18],
	ExecStatusArchived:   _ExecStatusName[18:26],
}

// String implements the Stringer interface.
func (x ExecStatus) String() string {
	if str, ok := _ExecStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ExecStatus(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ExecStatus) IsValid() bool {
	_, ok := _ExecStatusMap[x]
	return ok
}

var _ExecStatusValue = map[string]ExecStatus{
	_ExecStatusName[0:8]:   ExecStatusPlanning,
	_ExecStatusName[8:18]:  ExecStatusProcessing,
	_ExecStatusName[18:26]: ExecStatusArchived,
}

// ParseExecStatus attempts to convert a string to a ExecStatus.
func ParseExecStatus(name string) (ExecStatus, error) {
	if x, ok := _ExecStatusValue[name]; ok {
		return x, nil
	}
	return ExecStatus(0), fmt.Errorf("%s is %w", name, ErrInvalidExecStatus)
}

// MarshalText implements the text marshaller method.
func (x ExecStatus) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ExecStatus) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseExecStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errExecStatusNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *ExecStatus) Scan(value interface{}) (err error) {
	if value == nil {
		*x = ExecStatus(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = ExecStatus(v)
	case string:
		*x, err = ParseExecStatus(v)
	case []byte:
		*x, err = ParseExecStatus(string(v))
	case ExecStatus:
		*x = v
	case int:
		*x = ExecStatus(v)
	case *ExecStatus:
		if v == nil {
			return errExecStatusNilPtr
		}
		*x = *v
	case uint:
		*x = ExecStatus(v)
	case uint64:
		*x = ExecStatus(v)
	case *int:
		if v == nil {
			return errExecStatusNilPtr
		}
		*x = ExecStatus(*v)
	case *int64:
		if v == nil {
			return errExecStatusNilPtr
		}
		*x = ExecStatus(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = ExecStatus(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errExecStatusNilPtr
		}
		*x = ExecStatus(*v)
	case *uint:
		if v == nil {
			return errExecStatusNilPtr
		}
		*x = ExecStatus(*v)
	case *uint64:
		if v == nil {
			return errExecStatusNilPtr
		}
		*x = ExecStatus(*v)
	case *string:
		if v == nil {
			return errExecStatusNilPtr
		}
		*x, err = ParseExecStatus(*v)
	}

	return
}

// Value implements the driver Valuer interface.
func (x ExecStatus) Value() (driver.Value, error) {
	return x.String(), nil
}

const (
	// MemberTypeOwner is a MemberType of type Owner.
	MemberTypeOwner MemberType = iota + 1
	// MemberTypeAdmin is a MemberType of type Admin.
	MemberTypeAdmin
	// MemberTypeEditor is a MemberType of type Editor.
	MemberTypeEditor
	// MemberTypeExecuting is a MemberType of type Executing.
	MemberTypeExecuting
	// MemberTypeViewer is a MemberType of type Viewer.
	MemberTypeViewer
)

var ErrInvalidMemberType = fmt.Errorf("not a valid MemberType, try [%s]", strings.Join(_MemberTypeNames, ", "))

const _MemberTypeName = "owneradmineditorexecutingviewer"

var _MemberTypeNames = []string{
	_MemberTypeName[0:5],
	_MemberTypeName[5:10],
	_MemberTypeName[10:16],
	_MemberTypeName[16:25],
	_MemberTypeName[25:31],
}

// MemberTypeNames returns a list of possible string values of MemberType.
func MemberTypeNames() []string {
	tmp := make([]string, len(_MemberTypeNames))
	copy(tmp, _MemberTypeNames)
	return tmp
}

// MemberTypeValues returns a list of the values for MemberType
func MemberTypeValues() []MemberType {
	return []MemberType{
		MemberTypeOwner,
		MemberTypeAdmin,
		MemberTypeEditor,
		MemberTypeExecuting,
		MemberTypeViewer,
	}
}

var _MemberTypeMap = map[MemberType]string{
	MemberTypeOwner:     _MemberTypeName[0:5],
	MemberTypeAdmin:     _MemberTypeName[5:10],
	MemberTypeEditor:    _MemberTypeName[10:16],
	MemberTypeExecuting: _MemberTypeName[16:25],
	MemberTypeViewer:    _MemberTypeName[25:31],
}

// String implements the Stringer interface.
func (x MemberType) String() string {
	if str, ok := _MemberTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("MemberType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x MemberType) IsValid() bool {
	_, ok := _MemberTypeMap[x]
	return ok
}

var _MemberTypeValue = map[string]MemberType{
	_MemberTypeName[0:5]:   MemberTypeOwner,
	_MemberTypeName[5:10]:  MemberTypeAdmin,
	_MemberTypeName[10:16]: MemberTypeEditor,
	_MemberTypeName[16:25]: MemberTypeExecuting,
	_MemberTypeName[25:31]: MemberTypeViewer,
}

// ParseMemberType attempts to convert a string to a MemberType.
func ParseMemberType(name string) (MemberType, error) {
	if x, ok := _MemberTypeValue[name]; ok {
		return x, nil
	}
	return MemberType(0), fmt.Errorf("%s is %w", name, ErrInvalidMemberType)
}

// MarshalText implements the text marshaller method.
func (x MemberType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *MemberType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseMemberType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errMemberTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *MemberType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = MemberType(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = MemberType(v)
	case string:
		*x, err = ParseMemberType(v)
	case []byte:
		*x, err = ParseMemberType(string(v))
	case MemberType:
		*x = v
	case int:
		*x = MemberType(v)
	case *MemberType:
		if v == nil {
			return errMemberTypeNilPtr
		}
		*x = *v
	case uint:
		*x = MemberType(v)
	case uint64:
		*x = MemberType(v)
	case *int:
		if v == nil {
			return errMemberTypeNilPtr
		}
		*x = MemberType(*v)
	case *int64:
		if v == nil {
			return errMemberTypeNilPtr
		}
		*x = MemberType(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = MemberType(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errMemberTypeNilPtr
		}
		*x = MemberType(*v)
	case *uint:
		if v == nil {
			return errMemberTypeNilPtr
		}
		*x = MemberType(*v)
	case *uint64:
		if v == nil {
			return errMemberTypeNilPtr
		}
		*x = MemberType(*v)
	case *string:
		if v == nil {
			return errMemberTypeNilPtr
		}
		*x, err = ParseMemberType(*v)
	}

	return
}

// Value implements the driver Valuer interface.
func (x MemberType) Value() (driver.Value, error) {
	return x.String(), nil
}

const (
	// StateStatusWaiting is a StateStatus of type Waiting.
	StateStatusWaiting StateStatus = iota + 1
	// StateStatusMissing is a StateStatus of type Missing.
	StateStatusMissing
	// StateStatusTaken is a StateStatus of type Taken.
	StateStatusTaken
	// StateStatusReplaced is a StateStatus of type Replaced.
	StateStatusReplaced
)

var ErrInvalidStateStatus = fmt.Errorf("not a valid StateStatus, try [%s]", strings.Join(_StateStatusNames, ", "))

const _StateStatusName = "waitingmissingtakenreplaced"

var _StateStatusNames = []string{
	_StateStatusName[0:7],
	_StateStatusName[7:14],
	_StateStatusName[14:19],
	_StateStatusName[19:27],
}

// StateStatusNames returns a list of possible string values of StateStatus.
func StateStatusNames() []string {
	tmp := make([]string, len(_StateStatusNames))
	copy(tmp, _StateStatusNames)
	return tmp
}

// StateStatusValues returns a list of the values for StateStatus
func StateStatusValues() []StateStatus {
	return []StateStatus{
		StateStatusWaiting,
		StateStatusMissing,
		StateStatusTaken,
		StateStatusReplaced,
	}
}

var _StateStatusMap = map[StateStatus]string{
	StateStatusWaiting:  _StateStatusName[0:7],
	StateStatusMissing:  _StateStatusName[7:14],
	StateStatusTaken:    _StateStatusName[14:19],
	StateStatusReplaced: _StateStatusName[19:27],
}

// String implements the Stringer interface.
func (x StateStatus) String() string {
	if str, ok := _StateStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("StateStatus(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x StateStatus) IsValid() bool {
	_, ok := _StateStatusMap[x]
	return ok
}

var _StateStatusValue = map[string]StateStatus{
	_StateStatusName[0:7]:   StateStatusWaiting,
	_StateStatusName[7:14]:  StateStatusMissing,
	_StateStatusName[14:19]: StateStatusTaken,
	_StateStatusName[19:27]: StateStatusReplaced,
}

// ParseStateStatus attempts to convert a string to a StateStatus.
func ParseStateStatus(name string) (StateStatus, error) {
	if x, ok := _StateStatusValue[name]; ok {
		return x, nil
	}
	return StateStatus(0), fmt.Errorf("%s is %w", name, ErrInvalidStateStatus)
}

// MarshalText implements the text marshaller method.
func (x StateStatus) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *StateStatus) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseStateStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errStateStatusNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *StateStatus) Scan(value interface{}) (err error) {
	if value == nil {
		*x = StateStatus(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = StateStatus(v)
	case string:
		*x, err = ParseStateStatus(v)
	case []byte:
		*x, err = ParseStateStatus(string(v))
	case StateStatus:
		*x = v
	case int:
		*x = StateStatus(v)
	case *StateStatus:
		if v == nil {
			return errStateStatusNilPtr
		}
		*x = *v
	case uint:
		*x = StateStatus(v)
	case uint64:
		*x = StateStatus(v)
	case *int:
		if v == nil {
			return errStateStatusNilPtr
		}
		*x = StateStatus(*v)
	case *int64:
		if v == nil {
			return errStateStatusNilPtr
		}
		*x = StateStatus(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = StateStatus(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errStateStatusNilPtr
		}
		*x = StateStatus(*v)
	case *uint:
		if v == nil {
			return errStateStatusNilPtr
		}
		*x = StateStatus(*v)
	case *uint64:
		if v == nil {
			return errStateStatusNilPtr
		}
		*x = StateStatus(*v)
	case *string:
		if v == nil {
			return errStateStatusNilPtr
		}
		*x, err = ParseStateStatus(*v)
	}

	return
}

// Value implements the driver Valuer interface.
func (x StateStatus) Value() (driver.Value, error) {
	return x.String(), nil
}
