// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package list

import (
	"fmt"
	"strings"
)

const (
	// ExecStatusPlanning is a ExecStatus of type Planning.
	ExecStatusPlanning ExecStatus = iota
	// ExecStatusProcessing is a ExecStatus of type Processing.
	ExecStatusProcessing
	// ExecStatusArchived is a ExecStatus of type Archived.
	ExecStatusArchived
)

var ErrInvalidExecStatus = fmt.Errorf("not a valid ExecStatus, try [%s]", strings.Join(_ExecStatusNames, ", "))

const _ExecStatusName = "planningprocessingarchived"

var _ExecStatusNames = []string{
	_ExecStatusName[0:8],
	_ExecStatusName[8:18],
	_ExecStatusName[18:26],
}

// ExecStatusNames returns a list of possible string values of ExecStatus.
func ExecStatusNames() []string {
	tmp := make([]string, len(_ExecStatusNames))
	copy(tmp, _ExecStatusNames)
	return tmp
}

// ExecStatusValues returns a list of the values for ExecStatus
func ExecStatusValues() []ExecStatus {
	return []ExecStatus{
		ExecStatusPlanning,
		ExecStatusProcessing,
		ExecStatusArchived,
	}
}

var _ExecStatusMap = map[ExecStatus]string{
	ExecStatusPlanning:   _ExecStatusName[0:8],
	ExecStatusProcessing: _ExecStatusName[8:18],
	ExecStatusArchived:   _ExecStatusName[18:26],
}

// String implements the Stringer interface.
func (x ExecStatus) String() string {
	if str, ok := _ExecStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ExecStatus(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ExecStatus) IsValid() bool {
	_, ok := _ExecStatusMap[x]
	return ok
}

var _ExecStatusValue = map[string]ExecStatus{
	_ExecStatusName[0:8]:   ExecStatusPlanning,
	_ExecStatusName[8:18]:  ExecStatusProcessing,
	_ExecStatusName[18:26]: ExecStatusArchived,
}

// ParseExecStatus attempts to convert a string to a ExecStatus.
func ParseExecStatus(name string) (ExecStatus, error) {
	if x, ok := _ExecStatusValue[name]; ok {
		return x, nil
	}
	return ExecStatus(0), fmt.Errorf("%s is %w", name, ErrInvalidExecStatus)
}

// MarshalText implements the text marshaller method.
func (x ExecStatus) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ExecStatus) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseExecStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// MemberTypeOwner is a MemberType of type Owner.
	MemberTypeOwner MemberType = iota
	// MemberTypeEditor is a MemberType of type Editor.
	MemberTypeEditor
	// MemberTypeExecuting is a MemberType of type Executing.
	MemberTypeExecuting
)

var ErrInvalidMemberType = fmt.Errorf("not a valid MemberType, try [%s]", strings.Join(_MemberTypeNames, ", "))

const _MemberTypeName = "ownereditorexecuting"

var _MemberTypeNames = []string{
	_MemberTypeName[0:5],
	_MemberTypeName[5:11],
	_MemberTypeName[11:20],
}

// MemberTypeNames returns a list of possible string values of MemberType.
func MemberTypeNames() []string {
	tmp := make([]string, len(_MemberTypeNames))
	copy(tmp, _MemberTypeNames)
	return tmp
}

// MemberTypeValues returns a list of the values for MemberType
func MemberTypeValues() []MemberType {
	return []MemberType{
		MemberTypeOwner,
		MemberTypeEditor,
		MemberTypeExecuting,
	}
}

var _MemberTypeMap = map[MemberType]string{
	MemberTypeOwner:     _MemberTypeName[0:5],
	MemberTypeEditor:    _MemberTypeName[5:11],
	MemberTypeExecuting: _MemberTypeName[11:20],
}

// String implements the Stringer interface.
func (x MemberType) String() string {
	if str, ok := _MemberTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("MemberType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x MemberType) IsValid() bool {
	_, ok := _MemberTypeMap[x]
	return ok
}

var _MemberTypeValue = map[string]MemberType{
	_MemberTypeName[0:5]:   MemberTypeOwner,
	_MemberTypeName[5:11]:  MemberTypeEditor,
	_MemberTypeName[11:20]: MemberTypeExecuting,
}

// ParseMemberType attempts to convert a string to a MemberType.
func ParseMemberType(name string) (MemberType, error) {
	if x, ok := _MemberTypeValue[name]; ok {
		return x, nil
	}
	return MemberType(0), fmt.Errorf("%s is %w", name, ErrInvalidMemberType)
}

// MarshalText implements the text marshaller method.
func (x MemberType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *MemberType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseMemberType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// StateStatusWaiting is a StateStatus of type Waiting.
	StateStatusWaiting StateStatus = iota
	// StateStatusMissing is a StateStatus of type Missing.
	StateStatusMissing
	// StateStatusTaken is a StateStatus of type Taken.
	StateStatusTaken
	// StateStatusReplaced is a StateStatus of type Replaced.
	StateStatusReplaced
)

var ErrInvalidStateStatus = fmt.Errorf("not a valid StateStatus, try [%s]", strings.Join(_StateStatusNames, ", "))

const _StateStatusName = "waitingmissingtakenreplaced"

var _StateStatusNames = []string{
	_StateStatusName[0:7],
	_StateStatusName[7:14],
	_StateStatusName[14:19],
	_StateStatusName[19:27],
}

// StateStatusNames returns a list of possible string values of StateStatus.
func StateStatusNames() []string {
	tmp := make([]string, len(_StateStatusNames))
	copy(tmp, _StateStatusNames)
	return tmp
}

// StateStatusValues returns a list of the values for StateStatus
func StateStatusValues() []StateStatus {
	return []StateStatus{
		StateStatusWaiting,
		StateStatusMissing,
		StateStatusTaken,
		StateStatusReplaced,
	}
}

var _StateStatusMap = map[StateStatus]string{
	StateStatusWaiting:  _StateStatusName[0:7],
	StateStatusMissing:  _StateStatusName[7:14],
	StateStatusTaken:    _StateStatusName[14:19],
	StateStatusReplaced: _StateStatusName[19:27],
}

// String implements the Stringer interface.
func (x StateStatus) String() string {
	if str, ok := _StateStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("StateStatus(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x StateStatus) IsValid() bool {
	_, ok := _StateStatusMap[x]
	return ok
}

var _StateStatusValue = map[string]StateStatus{
	_StateStatusName[0:7]:   StateStatusWaiting,
	_StateStatusName[7:14]:  StateStatusMissing,
	_StateStatusName[14:19]: StateStatusTaken,
	_StateStatusName[19:27]: StateStatusReplaced,
}

// ParseStateStatus attempts to convert a string to a StateStatus.
func ParseStateStatus(name string) (StateStatus, error) {
	if x, ok := _StateStatusValue[name]; ok {
		return x, nil
	}
	return StateStatus(0), fmt.Errorf("%s is %w", name, ErrInvalidStateStatus)
}

// MarshalText implements the text marshaller method.
func (x StateStatus) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *StateStatus) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseStateStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
