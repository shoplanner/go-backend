// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users(
id,
login,
hash,
role
)VALUES(
?,
?,
?,
?
)
`

type CreateUserParams struct {
	ID    string
	Login string
	Hash  string
	Role  int32
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Login,
		arg.Hash,
		arg.Role,
	)
}

const getAll = `-- name: GetAll :many
SELECT
id, role, login, hash
FROM
users
`

func (q *Queries) GetAll(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Role,
			&i.Login,
			&i.Hash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByID = `-- name: GetByID :one
SELECT
id, role, login, hash
FROM
users
WHERE
id = ?
LIMIT 1
`

func (q *Queries) GetByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Login,
		&i.Hash,
	)
	return i, err
}

const getByLogin = `-- name: GetByLogin :one
SELECT
    id, role, login, hash
FROM
    users
WHERE
    login = ?
LIMIT 1
`

func (q *Queries) GetByLogin(ctx context.Context, login string) (User, error) {
	row := q.db.QueryRowContext(ctx, getByLogin, login)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Login,
		&i.Hash,
	)
	return i, err
}
