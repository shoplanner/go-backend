// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package user

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strings"
)

const (
	// RoleAdmin is a Role of type Admin.
	RoleAdmin Role = iota + 1
	// RoleUser is a Role of type User.
	RoleUser
)

var ErrInvalidRole = fmt.Errorf("not a valid Role, try [%s]", strings.Join(_RoleNames, ", "))

const _RoleName = "adminuser"

var _RoleNames = []string{
	_RoleName[0:5],
	_RoleName[5:9],
}

// RoleNames returns a list of possible string values of Role.
func RoleNames() []string {
	tmp := make([]string, len(_RoleNames))
	copy(tmp, _RoleNames)
	return tmp
}

// RoleValues returns a list of the values for Role
func RoleValues() []Role {
	return []Role{
		RoleAdmin,
		RoleUser,
	}
}

var _RoleMap = map[Role]string{
	RoleAdmin: _RoleName[0:5],
	RoleUser:  _RoleName[5:9],
}

// String implements the Stringer interface.
func (x Role) String() string {
	if str, ok := _RoleMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Role(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Role) IsValid() bool {
	_, ok := _RoleMap[x]
	return ok
}

var _RoleValue = map[string]Role{
	_RoleName[0:5]: RoleAdmin,
	_RoleName[5:9]: RoleUser,
}

// ParseRole attempts to convert a string to a Role.
func ParseRole(name string) (Role, error) {
	if x, ok := _RoleValue[name]; ok {
		return x, nil
	}
	return Role(0), fmt.Errorf("%s is %w", name, ErrInvalidRole)
}

// MarshalText implements the text marshaller method.
func (x Role) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Role) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseRole(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errRoleNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *Role) Scan(value interface{}) (err error) {
	if value == nil {
		*x = Role(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = Role(v)
	case string:
		*x, err = ParseRole(v)
	case []byte:
		*x, err = ParseRole(string(v))
	case Role:
		*x = v
	case int:
		*x = Role(v)
	case *Role:
		if v == nil {
			return errRoleNilPtr
		}
		*x = *v
	case uint:
		*x = Role(v)
	case uint64:
		*x = Role(v)
	case *int:
		if v == nil {
			return errRoleNilPtr
		}
		*x = Role(*v)
	case *int64:
		if v == nil {
			return errRoleNilPtr
		}
		*x = Role(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = Role(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errRoleNilPtr
		}
		*x = Role(*v)
	case *uint:
		if v == nil {
			return errRoleNilPtr
		}
		*x = Role(*v)
	case *uint64:
		if v == nil {
			return errRoleNilPtr
		}
		*x = Role(*v)
	case *string:
		if v == nil {
			return errRoleNilPtr
		}
		*x, err = ParseRole(*v)
	}

	return
}

// Value implements the driver Valuer interface.
func (x Role) Value() (driver.Value, error) {
	return x.String(), nil
}
