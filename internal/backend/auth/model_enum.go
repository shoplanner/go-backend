// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package auth

import (
	"fmt"
	"strings"
)

const (
	// TokenStatusActive is a TokenStatus of type Active.
	TokenStatusActive TokenStatus = iota + 1
	// TokenStatusRevoked is a TokenStatus of type Revoked.
	TokenStatusRevoked
)

var ErrInvalidTokenStatus = fmt.Errorf("not a valid TokenStatus, try [%s]", strings.Join(_TokenStatusNames, ", "))

const _TokenStatusName = "activerevoked"

var _TokenStatusNames = []string{
	_TokenStatusName[0:6],
	_TokenStatusName[6:13],
}

// TokenStatusNames returns a list of possible string values of TokenStatus.
func TokenStatusNames() []string {
	tmp := make([]string, len(_TokenStatusNames))
	copy(tmp, _TokenStatusNames)
	return tmp
}

// TokenStatusValues returns a list of the values for TokenStatus
func TokenStatusValues() []TokenStatus {
	return []TokenStatus{
		TokenStatusActive,
		TokenStatusRevoked,
	}
}

var _TokenStatusMap = map[TokenStatus]string{
	TokenStatusActive:  _TokenStatusName[0:6],
	TokenStatusRevoked: _TokenStatusName[6:13],
}

// String implements the Stringer interface.
func (x TokenStatus) String() string {
	if str, ok := _TokenStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("TokenStatus(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x TokenStatus) IsValid() bool {
	_, ok := _TokenStatusMap[x]
	return ok
}

var _TokenStatusValue = map[string]TokenStatus{
	_TokenStatusName[0:6]:  TokenStatusActive,
	_TokenStatusName[6:13]: TokenStatusRevoked,
}

// ParseTokenStatus attempts to convert a string to a TokenStatus.
func ParseTokenStatus(name string) (TokenStatus, error) {
	if x, ok := _TokenStatusValue[name]; ok {
		return x, nil
	}
	return TokenStatus(0), fmt.Errorf("%s is %w", name, ErrInvalidTokenStatus)
}

// MarshalText implements the text marshaller method.
func (x TokenStatus) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *TokenStatus) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseTokenStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
