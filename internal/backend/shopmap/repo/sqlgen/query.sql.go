// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package sqlgen

import (
	"context"
	"strings"
	"time"
)

const createShopMap = `-- name: CreateShopMap :exec
INSERT INTO
    shop_maps(
        id,
        owner_id,
        created_at,
        updated_at
    )
VALUES
    (?, ?, ?, ?)
`

type CreateShopMapParams struct {
	ID        string
	OwnerID   string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateShopMap(ctx context.Context, arg CreateShopMapParams) error {
	_, err := q.db.ExecContext(ctx, createShopMap,
		arg.ID,
		arg.OwnerID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteCategoriesAfterIndex = `-- name: DeleteCategoriesAfterIndex :exec
DELETE FROM
    shop_map_categories
WHERE
    map_id = ?
    AND number >= ?
`

type DeleteCategoriesAfterIndexParams struct {
	MapID  string
	Number uint32
}

func (q *Queries) DeleteCategoriesAfterIndex(ctx context.Context, arg DeleteCategoriesAfterIndexParams) error {
	_, err := q.db.ExecContext(ctx, deleteCategoriesAfterIndex, arg.MapID, arg.Number)
	return err
}

const deleteCategoriesByMapID = `-- name: DeleteCategoriesByMapID :exec
DELETE FROM
    shop_map_categories
WHERE
    map_id = ?
`

func (q *Queries) DeleteCategoriesByMapID(ctx context.Context, mapID string) error {
	_, err := q.db.ExecContext(ctx, deleteCategoriesByMapID, mapID)
	return err
}

const deleteShopMap = `-- name: DeleteShopMap :exec
DELETE FROM
    shop_maps
WHERE
    id = ?
`

func (q *Queries) DeleteShopMap(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteShopMap, id)
	return err
}

const deleteViewers = `-- name: DeleteViewers :exec
DELETE FROM
    shop_map_viewers
WHERE
    map_id = ?
`

func (q *Queries) DeleteViewers(ctx context.Context, mapID string) error {
	_, err := q.db.ExecContext(ctx, deleteViewers, mapID)
	return err
}

const deleteViewersByListID = `-- name: DeleteViewersByListID :exec
DELETE FROM
    shop_map_viewers
WHERE
    user_id IN (/*SLICE:user_ids*/?)
`

func (q *Queries) DeleteViewersByListID(ctx context.Context, userIds []string) error {
	query := deleteViewersByListID
	var queryParams []interface{}
	if len(userIds) > 0 {
		for _, v := range userIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:user_ids*/?", strings.Repeat(",?", len(userIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:user_ids*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const getByID = `-- name: GetByID :one
SELECT
    id, owner_id, created_at, updated_at
FROM
    shop_maps AS m
WHERE
    m.id = ?
LIMIT
    1
`

func (q *Queries) GetByID(ctx context.Context, id string) (ShopMap, error) {
	row := q.db.QueryRowContext(ctx, getByID, id)
	var i ShopMap
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getByListID = `-- name: GetByListID :many
SELECT
    id, owner_id, created_at, updated_at
FROM
    shop_maps
WHERE
    id IN (/*SLICE:map_ids*/?)
`

func (q *Queries) GetByListID(ctx context.Context, mapIds []string) ([]ShopMap, error) {
	query := getByListID
	var queryParams []interface{}
	if len(mapIds) > 0 {
		for _, v := range mapIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:map_ids*/?", strings.Repeat(",?", len(mapIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:map_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShopMap
	for rows.Next() {
		var i ShopMap
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByOwnerID = `-- name: GetByOwnerID :many
SELECT
    id, owner_id, created_at, updated_at
FROM
    shop_maps AS m
WHERE
    m.owner_id = ?
`

func (q *Queries) GetByOwnerID(ctx context.Context, ownerID string) ([]ShopMap, error) {
	rows, err := q.db.QueryContext(ctx, getByOwnerID, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShopMap
	for rows.Next() {
		var i ShopMap
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoriesByID = `-- name: GetCategoriesByID :many
SELECT
    map_id, number, category
FROM
    shop_map_categories
WHERE
    map_id = ?
`

func (q *Queries) GetCategoriesByID(ctx context.Context, mapID string) ([]ShopMapCategory, error) {
	rows, err := q.db.QueryContext(ctx, getCategoriesByID, mapID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShopMapCategory
	for rows.Next() {
		var i ShopMapCategory
		if err := rows.Scan(&i.MapID, &i.Number, &i.Category); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoriesByListID = `-- name: GetCategoriesByListID :many
SELECT
    map_id, number, category
FROM
    shop_map_categories
WHERE
    map_id IN (/*SLICE:map_ids*/?)
`

func (q *Queries) GetCategoriesByListID(ctx context.Context, mapIds []string) ([]ShopMapCategory, error) {
	query := getCategoriesByListID
	var queryParams []interface{}
	if len(mapIds) > 0 {
		for _, v := range mapIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:map_ids*/?", strings.Repeat(",?", len(mapIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:map_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShopMapCategory
	for rows.Next() {
		var i ShopMapCategory
		if err := rows.Scan(&i.MapID, &i.Number, &i.Category); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMapsWithViewer = `-- name: GetMapsWithViewer :many
SELECT
    map_id
FROM
    shop_map_viewers
WHERE
    user_id = ?
`

func (q *Queries) GetMapsWithViewer(ctx context.Context, userID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getMapsWithViewer, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var map_id string
		if err := rows.Scan(&map_id); err != nil {
			return nil, err
		}
		items = append(items, map_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getViewersByListID = `-- name: GetViewersByListID :many
SELECT
    map_id, user_id
FROM
    shop_map_viewers
WHERE
    map_id IN (/*SLICE:map_ids*/?)
`

func (q *Queries) GetViewersByListID(ctx context.Context, mapIds []string) ([]ShopMapViewer, error) {
	query := getViewersByListID
	var queryParams []interface{}
	if len(mapIds) > 0 {
		for _, v := range mapIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:map_ids*/?", strings.Repeat(",?", len(mapIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:map_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShopMapViewer
	for rows.Next() {
		var i ShopMapViewer
		if err := rows.Scan(&i.MapID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getViewersByMapID = `-- name: GetViewersByMapID :many
SELECT
    map_id, user_id
FROM
    shop_map_viewers
WHERE
    map_id = ?
`

func (q *Queries) GetViewersByMapID(ctx context.Context, mapID string) ([]ShopMapViewer, error) {
	rows, err := q.db.QueryContext(ctx, getViewersByMapID, mapID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShopMapViewer
	for rows.Next() {
		var i ShopMapViewer
		if err := rows.Scan(&i.MapID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCategories = `-- name: InsertCategories :copyfrom
INSERT INTO
    shop_map_categories(map_id, number, category)
VALUES
    (?, ?, ?)
`

type InsertCategoriesParams struct {
	MapID    string
	Number   uint32
	Category string
}

const insertViewers = `-- name: InsertViewers :copyfrom
INSERT INTO
    shop_map_viewers(map_id, user_id)
VALUES
    (?, ?)
`

type InsertViewersParams struct {
	MapID  string
	UserID string
}

const updateCategories = `-- name: UpdateCategories :exec
INSERT INTO
    shop_map_categories (map_id, number, category)
VALUES
    (?, ?, ?) ON DUPLICATE KEY
UPDATE
    map_id =
VALUES
    (map_id),
    number =
VALUES
    (number),
    category =
VALUES
    (category)
`

type UpdateCategoriesParams struct {
	MapID    string
	Number   uint32
	Category string
}

func (q *Queries) UpdateCategories(ctx context.Context, arg UpdateCategoriesParams) error {
	_, err := q.db.ExecContext(ctx, updateCategories, arg.MapID, arg.Number, arg.Category)
	return err
}

const updateShopMap = `-- name: UpdateShopMap :exec
UPDATE
    shop_maps
SET
    owner_id = ?,
    updated_at = ?
WHERE
    id = ?
`

type UpdateShopMapParams struct {
	OwnerID   string
	UpdatedAt time.Time
	ID        string
}

func (q *Queries) UpdateShopMap(ctx context.Context, arg UpdateShopMapParams) error {
	_, err := q.db.ExecContext(ctx, updateShopMap, arg.OwnerID, arg.UpdatedAt, arg.ID)
	return err
}
