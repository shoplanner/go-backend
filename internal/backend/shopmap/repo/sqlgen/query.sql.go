// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlgen

import (
	"context"
	"time"
)

const createShopMap = `-- name: CreateShopMap :exec
INSERT INTO
    shop_maps(
        id,
        owner_id,
        created_at,
        updated_at
    )
VALUES
    (?, ?, ?, ?)
`

type CreateShopMapParams struct {
	ID        string
	OwnerID   string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateShopMap(ctx context.Context, arg CreateShopMapParams) error {
	_, err := q.db.ExecContext(ctx, createShopMap,
		arg.ID,
		arg.OwnerID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteCategories = `-- name: DeleteCategories :exec
DELETE FROM
    shop_map_categories
WHERE
    map_id = ?
`

func (q *Queries) DeleteCategories(ctx context.Context, mapID string) error {
	_, err := q.db.ExecContext(ctx, deleteCategories, mapID)
	return err
}

const deleteShopMap = `-- name: DeleteShopMap :exec
DELETE FROM
    shop_maps
WHERE
    id = ?
`

func (q *Queries) DeleteShopMap(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteShopMap, id)
	return err
}

const deleteViewers = `-- name: DeleteViewers :exec
DELETE FROM
    shop_map_viewers
WHERE
    map_id = ?
`

func (q *Queries) DeleteViewers(ctx context.Context, mapID string) error {
	_, err := q.db.ExecContext(ctx, deleteViewers, mapID)
	return err
}

const getByID = `-- name: GetByID :many
SELECT
    m.id,
    m.owner_id,
    m.created_at,
    m.updated_at,
    v.user_id,
    c.category
FROM
    shop_maps AS m
    JOIN shop_map_categories AS c ON m.id = c.map_id
    JOIN shop_map_viewers AS v ON m.id = v.map_id
WHERE
    m.id = ?
`

type GetByIDRow struct {
	ID        string
	OwnerID   string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    string
	Category  string
}

func (q *Queries) GetByID(ctx context.Context, id string) ([]GetByIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetByIDRow
	for rows.Next() {
		var i GetByIDRow
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByUserID = `-- name: GetByUserID :many
SELECT
    m.id,
    m.owner_id,
    m.created_at,
    m.updated_at,
    v.user_id,
    c.category
FROM
    shop_maps AS m
    JOIN shop_map_categories AS c ON m.id = c.map_id
    JOIN shop_map_viewers AS v ON m.id = v.map_id
WHERE
    v.user_id = ?
`

type GetByUserIDRow struct {
	ID        string
	OwnerID   string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    string
	Category  string
}

func (q *Queries) GetByUserID(ctx context.Context, userID string) ([]GetByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetByUserIDRow
	for rows.Next() {
		var i GetByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCategories = `-- name: InsertCategories :copyfrom
INSERT INTO
    shop_map_categories(map_id, category)
VALUES
    (?, ?)
`

type InsertCategoriesParams struct {
	MapID    string
	Category string
}

const insertViewers = `-- name: InsertViewers :copyfrom
INSERT INTO
    shop_map_viewers(map_id, user_id)
VALUES
    (?, ?)
`

type InsertViewersParams struct {
	MapID  string
	UserID string
}

const updateShopMap = `-- name: UpdateShopMap :exec
UPDATE
    shop_maps
SET
    owner_id = ?,
    updated_at = ?,
    created_at = ?
WHERE
    id = ?
`

type UpdateShopMapParams struct {
	OwnerID   string
	UpdatedAt time.Time
	CreatedAt time.Time
	ID        string
}

func (q *Queries) UpdateShopMap(ctx context.Context, arg UpdateShopMapParams) error {
	_, err := q.db.ExecContext(ctx, updateShopMap,
		arg.OwnerID,
		arg.UpdatedAt,
		arg.CreatedAt,
		arg.ID,
	)
	return err
}
