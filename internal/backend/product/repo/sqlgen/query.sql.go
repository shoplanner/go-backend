// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlgen

import (
	"context"
	"database/sql"
	"time"
)

const deleteProductForm = `-- name: DeleteProductForm :exec
DELETE FROM
    product_forms
WHERE
    product_id = ?
    AND name = ?
`

type DeleteProductFormParams struct {
	ProductID string
	Name      string
}

func (q *Queries) DeleteProductForm(ctx context.Context, arg DeleteProductFormParams) error {
	_, err := q.db.ExecContext(ctx, deleteProductForm, arg.ProductID, arg.Name)
	return err
}

const insertCategory = `-- name: InsertCategory :exec
INSERT INTO
    product_categories (id, name)
VALUES
    (?, ?)
`

type InsertCategoryParams struct {
	ID   string
	Name string
}

func (q *Queries) InsertCategory(ctx context.Context, arg InsertCategoryParams) error {
	_, err := q.db.ExecContext(ctx, insertCategory, arg.ID, arg.Name)
	return err
}

const insertProduct = `-- name: InsertProduct :exec
INSERT INTO
    products (id, name, category_id, created_at, updated_at)
VALUES
    (?, ?, ?, ?, ?)
`

type InsertProductParams struct {
	ID         string
	Name       string
	CategoryID sql.NullString
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) InsertProduct(ctx context.Context, arg InsertProductParams) error {
	_, err := q.db.ExecContext(ctx, insertProduct,
		arg.ID,
		arg.Name,
		arg.CategoryID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const insertProductForms = `-- name: InsertProductForms :copyfrom
INSERT INTO
    product_forms (product_id, name)
VALUES
    (?, ?)
`

type InsertProductFormsParams struct {
	ProductID string
	Name      string
}

const updateCategory = `-- name: UpdateCategory :exec
UPDATE
    product_categories
SET
    name = ?
WHERE
    id = ?
`

type UpdateCategoryParams struct {
	Name string
	ID   string
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.db.ExecContext(ctx, updateCategory, arg.Name, arg.ID)
	return err
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE
    products
SET
    name = ?,
    updated_at = ?,
    category_id = ?
WHERE
    id = ?
`

type UpdateProductParams struct {
	Name       string
	UpdatedAt  time.Time
	CategoryID sql.NullString
	ID         string
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct,
		arg.Name,
		arg.UpdatedAt,
		arg.CategoryID,
		arg.ID,
	)
	return err
}

const updateProductForm = `-- name: UpdateProductForm :exec
UPDATE
    product_forms
SET
    product_id = ?,
    name = ?
`

type UpdateProductFormParams struct {
	ProductID string
	Name      string
}

func (q *Queries) UpdateProductForm(ctx context.Context, arg UpdateProductFormParams) error {
	_, err := q.db.ExecContext(ctx, updateProductForm, arg.ProductID, arg.Name)
	return err
}
