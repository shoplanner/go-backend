basePath: /api/v1
definitions:
  api.ProductList:
    properties:
      product_ids:
        items:
          type: string
        type: array
    type: object
  api.ProductStateOptions:
    properties:
      count:
        type: integer
      form_idx:
        type: integer
      replacement:
        properties:
          count:
            type: integer
          form_idx:
            type: integer
          product_id:
            type: integer
        type: object
      status:
        type: string
    type: object
  api.RefreshRequest:
    properties:
      refresh_token:
        type: string
    type: object
  api.TokenResponse:
    properties:
      access_token:
        type: string
      expires:
        type: string
      refresh_token:
        type: string
      type:
        type: string
      user_id:
        type: string
    type: object
  auth.Credentials:
    properties:
      device_id:
        type: string
      login:
        type: string
      password:
        type: string
    type: object
  list.ListOptions:
    properties:
      status:
        type: string
      title:
        type: string
    type: object
  list.MemberOptions:
    properties:
      type:
        type: string
      user_id:
        type: string
    type: object
  product.Options:
    properties:
      category:
        type: string
      forms:
        items:
          type: string
        type: array
      name:
        type: string
    type: object
  shopmap.Options:
    properties:
      categories:
        items:
          type: string
        type: array
        uniqueItems: true
      title:
        type: string
      viewers_id:
        items:
          type: string
        type: array
        uniqueItems: true
    required:
    - title
    type: object
  user.CreateOptions:
    properties:
      login:
        type: string
      password:
        maxLength: 72
        type: string
    required:
    - password
    type: object
info:
  contact: {}
  title: ShoPlanner
  version: 0.0.1
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      operationId: auth-login
      parameters:
      - description: creds
        in: body
        name: opts
        required: true
        schema:
          $ref: '#/definitions/auth.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.TokenResponse'
      summary: login with existing user
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      operationId: auth-logout
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: logout from session
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      operationId: auth-refresh
      parameters:
      - description: refresh token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/api.RefreshRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.TokenResponse'
      summary: refresh access token
      tags:
      - Auth
  /favorite/id/{id}:
    get:
      operationId: get-favorite-list-id
      parameters:
      - description: id of favorites list
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: get list of favorite products by id
      tags:
      - Favorites
  /favorite/id/{id}/product:
    delete:
      operationId: remove-favorite-products
      parameters:
      - description: id of favorites list
        in: path
        name: id
        required: true
        type: string
      - description: ids of new products
        in: body
        name: products
        required: true
        schema:
          $ref: '#/definitions/api.ProductList'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: remove some products from favorite list
      tags:
      - Favorites
    post:
      operationId: add-favorite-products
      parameters:
      - description: id of favorites list
        in: path
        name: id
        required: true
        type: string
      - description: ids of new products
        in: body
        name: products
        required: true
        schema:
          $ref: '#/definitions/api.ProductList'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: add new products to list of favorties
      tags:
      - Favorites
  /favorite/user:
    get:
      operationId: get-user-favorites-lists
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: get all favorites lists, related to logged user
      tags:
      - Favorites
  /lists:
    get:
      operationId: product-list-get
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: get product lists by user id
      tags:
      - ProductList
    post:
      consumes:
      - application/json
      operationId: product-list-create
      parameters:
      - description: options of new product list
        in: body
        name: opts
        required: true
        schema:
          $ref: '#/definitions/list.ListOptions'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: creates new product list
      tags:
      - ProductList
  /lists/{id}:
    delete:
      operationId: product-list-delete-by-id
      parameters:
      - description: id of product list
        in: path
        name: id
        required: true
        type: string
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: delete product list by id
      tags:
      - ProductList
    get:
      operationId: product-list-get-by-id
      parameters:
      - description: id of product list
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: get product list by list id
      tags:
      - ProductList
    put:
      consumes:
      - application/json
      operationId: product-list-update-by-id
      parameters:
      - description: opts to update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/list.ListOptions'
      - description: id of product list
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: update product list by id
      tags:
      - ProductList
  /lists/{id}/members:
    delete:
      consumes:
      - application/json
      operationId: product-list-delete-members
      parameters:
      - description: id of members to delete
        in: body
        name: body
        required: true
        schema:
          items:
            type: string
          type: array
      - description: product list id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: delete members from product list
      tags:
      - ProductList
    post:
      operationId: product-list-add-members
      parameters:
      - description: users to add
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/list.MemberOptions'
          type: array
      - description: id of product list
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: add viewers to product list
      tags:
      - ProductList
  /lists/{id}/products:
    delete:
      operationId: product-list-delete-products
      parameters:
      - description: product list id
        in: path
        name: id
        required: true
        type: string
      - description: ids of deleting products
        in: body
        name: body
        required: true
        schema:
          items:
            type: string
          type: array
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: delete products from product list
      tags:
      - ProductList
    post:
      consumes:
      - application/json
      operationId: product-list-add-products
      parameters:
      - description: product list id
        in: path
        name: id
        required: true
        type: string
      - description: new products
        in: body
        name: body
        required: true
        schema:
          additionalProperties:
            $ref: '#/definitions/api.ProductStateOptions'
          type: object
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: add new products to product list
      tags:
      - ProductList
  /lists/{id}/products/{product_id}:
    patch:
      operationId: product-list-update-state
      parameters:
      - description: product list id
        in: path
        name: id
        required: true
        type: string
      - description: product state product id
        in: path
        name: product_id
        required: true
        type: string
      - description: product state options
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/api.ProductStateOptions'
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: update single product state in given product list
      tags:
      - ProductList
  /lists/{id}/reorder:
    patch:
      operationId: product-list-reorder-states
      parameters:
      - description: product list id
        in: path
        name: id
        required: true
        type: string
      - description: ids of products in new order
        in: body
        name: body
        required: true
        schema:
          items:
            type: string
          type: array
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: change order of products in product list
      tags:
      - ProductList
  /product:
    post:
      consumes:
      - application/json
      operationId: product-create
      parameters:
      - description: product to create
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/product.Options'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Creates new product
      tags:
      - Product
  /product/id/{id}:
    get:
      consumes:
      - application/json
      operationId: product-get
      parameters:
      - description: product id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get product info
      tags:
      - Product
    put:
      operationId: product-update
      parameters:
      - description: product id
        in: path
        name: id
        required: true
        type: string
      - description: product to update
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/product.Options'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Update existing new product
      tags:
      - Product
  /product/list/{ids}:
    get:
      consumes:
      - application/json
      operationId: product-get-list
      parameters:
      - collectionFormat: csv
        description: product id
        in: path
        items:
          type: string
        name: ids
        required: true
        type: array
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get products info
      tags:
      - Product
  /shopmap:
    post:
      consumes:
      - application/json
      operationId: shopmap-create
      parameters:
      - description: shop map to create
        in: body
        name: config
        required: true
        schema:
          $ref: '#/definitions/shopmap.Options'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Creates new shop map
      tags:
      - ShopMap
  /shopmap/id/{id}:
    delete:
      operationId: shopmap-delete
      parameters:
      - description: id of shop map
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Deletes shop map
      tags:
      - ShopMap
    get:
      operationId: shopmap-get-id
      parameters:
      - description: id of shop map
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get existing shop map by it's ID
      tags:
      - ShopMap
    put:
      consumes:
      - application/json
      operationId: shopmap-update
      parameters:
      - description: id of shop map
        in: path
        name: id
        required: true
        type: string
      - description: new configuration
        in: body
        name: config
        required: true
        schema:
          $ref: '#/definitions/shopmap.Options'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: fully updates shop map
      tags:
      - ShopMap
  /shopmap/id/{id}/reorder:
    patch:
      consumes:
      - application/json
      operationId: shopmap-reorder
      parameters:
      - description: id of shop map
        in: path
        name: id
        required: true
        type: string
      - description: new order of categories
        in: body
        name: categories
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: only reorder categories in given shop map
      tags:
      - ShopMap
  /shopmap/user:
    get:
      operationId: shopmap-get-current-user
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get shop maps of current logged user
      tags:
      - ShopMap
  /user:
    get:
      operationId: user-get-all
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: list all users
      tags:
      - User
  /user/register:
    post:
      consumes:
      - application/json
      operationId: user-register
      parameters:
      - description: data for creating new user
        in: body
        name: opts
        required: true
        schema:
          $ref: '#/definitions/user.CreateOptions'
      produces:
      - application/json
      responses: {}
      summary: creates new user
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Auth
    type: apiKey
swagger: "2.0"
